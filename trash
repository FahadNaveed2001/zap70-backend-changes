app.post("/upload-test", upload.single("file"), async (req, res) => {
  try {
    const {
      file,
      body: { usmleStep, testName, testDescription },
    } = req;

    const inputFilePath = file.path;
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(inputFilePath);
    const worksheet = workbook.worksheets[0];

    // Convert Excel file to JSON using xlsx
    const xlsxWorkbook = xlsx.readFile(inputFilePath);
    const sheetName = xlsxWorkbook.SheetNames[0];
    const sheet = xlsxWorkbook.Sheets[sheetName];
    const jsonData = xlsx.utils.sheet_to_json(sheet, { defval: null });

    // Array to hold references to saved TestQuestion objects
    const savedQuestions = [];

    // Process each question and save it as a TestQuestion
    for (const data of jsonData) {
      let convertedData = toLowerCaseKeys(data);
      convertedData = convertOptions(convertedData);
      if (!Array.isArray(convertedData.comments)) {
        convertedData.comments = [];
      }
      convertedData.questionExplanation = convertedData.explanation;
      delete convertedData.explanation;
      convertedData.row = jsonData.indexOf(data) + 1;

      // Handle image upload if needed
      const imgFileName = await handleImageUpload(worksheet, convertedData, testName, usmleStep);
      if (imgFileName) {
        if (convertedData.row === 8) {
          convertedData.image = imgFileName;
        } else if (convertedData.row === 10) {
          convertedData.imageTwo = imgFileName;
        }
      }

      const newQuestion = new TestQuestion(convertedData);
      const savedQuestion = await newQuestion.save();
      savedQuestions.push(savedQuestion._id); // Store ObjectId reference
    }

    // Save references to TestQuestion ObjectId in Test collection
    const newTest = new Test({
      testName,
      usmleStep,
      testDescription,
      questions: savedQuestions,
    });
    const savedTest = await newTest.save();

    // Respond with success message
    res.status(200).json({
      status: "success",
      success: true,
      message: "Questions saved in db",
      data: savedTest,
    });

    // Cleanup: delete uploaded file
    fs.unlink(inputFilePath, (err) => {
      if (err) {
        console.error("Error deleting the file:", err);
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({
      error: true,
      message: "Error saving questions",
      errorMessage: error.message,
    });
  }
});